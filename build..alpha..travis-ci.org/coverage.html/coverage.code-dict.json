{"/home/travis/build/npmtest/node-npmtest-homebridge-people/test.js":"/* istanbul instrument in package npmtest_homebridge_people */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-people/lib.npmtest_homebridge_people.js":"/* istanbul instrument in package npmtest_homebridge_people */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_homebridge_people = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_homebridge_people = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-people/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-homebridge-people && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_homebridge_people */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_homebridge_people\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_homebridge_people.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_homebridge_people.rollup.js'] =\n            local.assetsDict['/assets.npmtest_homebridge_people.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_homebridge_people.__dirname +\n                    '/lib.npmtest_homebridge_people.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-homebridge-people/node_modules/homebridge-people/index.js":"var ping = require('ping');\nvar moment = require('moment');\nvar request = require(\"request\");\nvar http = require('http');\nvar url = require('url');\nvar DEFAULT_REQUEST_TIMEOUT = 10000;\nvar SENSOR_ANYONE = 'Anyone';\nvar SENSOR_NOONE = 'No One';\n\nvar Service, Characteristic, HomebridgeAPI;\nmodule.exports = function(homebridge) {\n    Service = homebridge.hap.Service;\n    Characteristic = homebridge.hap.Characteristic;\n    HomebridgeAPI = homebridge;\n\n    homebridge.registerPlatform(\"homebridge-people\", \"People\", PeoplePlatform);\n    homebridge.registerAccessory(\"homebridge-people\", \"PeopleAccessory\", PeopleAccessory);\n    homebridge.registerAccessory(\"homebridge-people\", \"PeopleAllAccessory\", PeopleAllAccessory);\n}\n\n// #######################\n// PeoplePlatform\n// #######################\n\nfunction PeoplePlatform(log, config){\n    this.log = log;\n    this.threshold = config['threshold'] || 15;\n    this.anyoneSensor = config['anyoneSensor'] || true;\n    this.nooneSensor = config['nooneSensor'] || false;\n    this.webhookPort = config[\"webhookPort\"] || 51828;\n    this.cacheDirectory = config[\"cacheDirectory\"] || HomebridgeAPI.user.persistPath();\n    this.pingInterval = config[\"pingInterval\"] || 10000;\n    this.ignoreReEnterExitSeconds = config[\"ignoreReEnterExitSeconds\"] || 0;\n    this.people = config['people'];\n    this.storage = require('node-persist');\n    this.storage.initSync({dir:this.cacheDirectory});\n    this.webhookQueue = [];\n}\n\nPeoplePlatform.prototype = {\n\n    accessories: function(callback) {\n        this.accessories = [];\n        this.peopleAccessories = [];\n        for(var i = 0; i < this.people.length; i++){\n            var peopleAccessory = new PeopleAccessory(this.log, this.people[i], this);\n            this.accessories.push(peopleAccessory);\n            this.peopleAccessories.push(peopleAccessory);\n        }\n        if(this.anyoneSensor) {\n            this.peopleAnyOneAccessory = new PeopleAllAccessory(this.log, SENSOR_ANYONE, this);\n            this.accessories.push(this.peopleAnyOneAccessory);\n        }\n        if(this.nooneSensor) {\n            this.peopleNoOneAccessory = new PeopleAllAccessory(this.log, SENSOR_NOONE, this);\n            this.accessories.push(this.peopleNoOneAccessory);\n        }\n        callback(this.accessories);\n        \n        this.startServer();\n    },\n    \n    startServer: function() {\n        //\n        // HTTP webserver code influenced by benzman81's great\n        // homebridge-http-webhooks homebridge plugin.\n        // https://github.com/benzman81/homebridge-http-webhooks\n        //\n        \n        // Start the HTTP webserver\n        http.createServer((function(request, response) {\n            var theUrl = request.url;\n            var theUrlParts = url.parse(theUrl, true);\n            var theUrlParams = theUrlParts.query;\n            var body = [];\n            request.on('error', (function(err) {\n              this.log(\"WebHook error: %s.\", err);\n            }).bind(this)).on('data', function(chunk) {\n              body.push(chunk);\n            }).on('end', (function() {\n              body = Buffer.concat(body).toString();\n\n              response.on('error', function(err) {\n                this.log(\"WebHook error: %s.\", err);\n              });\n\n              response.statusCode = 200;\n              response.setHeader('Content-Type', 'application/json');\n\n              if(!theUrlParams.sensor || !theUrlParams.state) {\n                response.statusCode = 404;\n                response.setHeader(\"Content-Type\", \"text/plain\");\n                var errorText = \"WebHook error: No sensor or state specified in request.\";\n                this.log(errorText);\n                response.write(errorText);\n                response.end();\n              }\n              else {\n                var sensor = theUrlParams.sensor.toLowerCase();\n                var newState = (theUrlParams.state == \"true\");\n                this.log('Received hook for ' + sensor + ' -> ' + newState);\n                var responseBody = {\n                  success: true\n                };\n                for(var i = 0; i < this.peopleAccessories.length; i++){\n                  var peopleAccessory = this.peopleAccessories[i];\n                  var target = peopleAccessory.target\n                  if(peopleAccessory.name.toLowerCase() === sensor) {\n                    this.clearWebhookQueueForTarget(target);\n                    this.webhookQueue.push({\"target\": target, \"newState\": newState, \"timeoutvar\": setTimeout((function(){ \n                        this.runWebhookFromQueueForTarget(target);\n                    }).bind(this),  peopleAccessory.ignoreReEnterExitSeconds * 1000)});\n                    break;\n                  }\n                }\n                response.write(JSON.stringify(responseBody));\n                response.end();\n              }\n            }).bind(this));\n        }).bind(this)).listen(this.webhookPort);\n        this.log(\"WebHook: Started server on port '%s'.\", this.webhookPort);\n    },\n    \n    clearWebhookQueueForTarget: function(target) {\n        for (var i = 0; i < this.webhookQueue.length; i++) {\n            var webhookQueueEntry = this.webhookQueue[i];\n            if(webhookQueueEntry.target == target) {\n                clearTimeout(webhookQueueEntry.timeoutvar);\n                this.webhookQueue.splice(i, 1);\n                break;\n            }\n        }\n    },\n\n    runWebhookFromQueueForTarget: function(target) {\n        for (var i = 0; i < this.webhookQueue.length; i++) {\n            var webhookQueueEntry = this.webhookQueue[i];\n            if(webhookQueueEntry.target == target) {\n                this.log('Running hook for ' + target + ' -> ' + webhookQueueEntry.newState);\n                this.webhookQueue.splice(i, 1);\n                this.storage.setItemSync('lastWebhook_' + target, Date.now());\n                this.getPeopleAccessoryForTarget(target).setNewState(webhookQueueEntry.newState);\n                break;\n            }\n        }\n    },\n    \n    getPeopleAccessoryForTarget: function(target) {\n        for(var i = 0; i < this.peopleAccessories.length; i++){\n            var peopleAccessory = this.peopleAccessories[i];\n            if(peopleAccessory.target === target) {\n                return peopleAccessory;\n            }\n        }\n        return null;\n    }\n}\n\n// #######################\n// PeopleAccessory\n// #######################\n\nfunction PeopleAccessory(log, config, platform) {\n    this.log = log;\n    this.name = config['name'];\n    this.target = config['target'];\n    this.platform = platform;\n    this.threshold = config['threshold'] || this.platform.threshold;\n    this.pingInterval = config['pingInterval'] || this.platform.pingInterval;\n    this.ignoreReEnterExitSeconds = config['ignoreReEnterExitSeconds'] || this.platform.ignoreReEnterExitSeconds;\n    this.stateCache = false;\n    \n    this.service = new Service.OccupancySensor(this.name);\n    this.service\n        .getCharacteristic(Characteristic.OccupancyDetected)\n        .on('get', this.getState.bind(this));\n  \n    this.initStateCache();\n\n    if(this.pingInterval > -1) {\n        this.ping();\n    }\n}\n\nPeopleAccessory.prototype.getState = function(callback) {\n  callback(null, this.stateCache);\n}\n\nPeopleAccessory.prototype.initStateCache = function() {\n    var isActive = this.isActive();\n    this.stateCache = isActive;\n}\n\nPeopleAccessory.prototype.isActive = function() {\n    var lastSeenUnix = this.platform.storage.getItemSync('lastSuccessfulPing_' + this.target);\n    if (lastSeenUnix) {\n        var lastSeenMoment = moment(lastSeenUnix);\n        var activeThreshold = moment().subtract(this.threshold, 'm');\n        return lastSeenMoment.isAfter(activeThreshold);\n    }\n    return false;\n}\n\nPeopleAccessory.prototype.ping = function() {\n    if(this.webhookIsOutdated()) {\n        ping.sys.probe(this.target, function(state){\n            if(this.webhookIsOutdated()) {\n                if (state) {\n                    this.platform.storage.setItemSync('lastSuccessfulPing_' + this.target, Date.now());\n                }\n                if(this.successfulPingOccurredAfterWebhook()) {\n                    var newState = this.isActive();\n                    this.setNewState(newState);\n                }\n            }\n            setTimeout(PeopleAccessory.prototype.ping.bind(this), this.pingInterval);\n        }.bind(this));\n    }\n    else {\n        setTimeout(PeopleAccessory.prototype.ping.bind(this), this.pingInterval);\n    }\n}\n\nPeopleAccessory.prototype.webhookIsOutdated = function() {\n    var lastWebhookUnix = this.platform.storage.getItemSync('lastWebhook_' + this.target);\n    if (lastWebhookUnix) {\n        var lastWebhookMoment = moment(lastWebhookUnix);\n        var activeThreshold = moment().subtract(this.threshold, 'm');\n        return lastWebhookMoment.isBefore(activeThreshold);\n    }\n    return true;\n}\n\nPeopleAccessory.prototype.successfulPingOccurredAfterWebhook = function() {\n    var lastSuccessfulPing = this.platform.storage.getItemSync('lastSuccessfulPing_' + this.target);\n    if(!lastSuccessfulPing) {\n        return false;\n    }\n    var lastWebhook = this.platform.storage.getItemSync('lastWebhook_' + this.target);\n    if(!lastWebhook) {\n        return true;\n    }\n    var lastSuccessfulPingMoment = moment(lastSuccessfulPing);\n    var lastWebhookMoment = moment(lastWebhook);\n    return lastSuccessfulPingMoment.isAfter(lastWebhookMoment);\n}\n\nPeopleAccessory.prototype.setNewState = function(newState) {\n    var oldState = this.stateCache;\n    if (oldState != newState) {\n        this.stateCache = newState;\n        this.service.getCharacteristic(Characteristic.OccupancyDetected).setValue(newState);\n\n        if(this.platform.peopleAnyOneAccessory) {\n            this.platform.peopleAnyOneAccessory.refreshState();\n        }\n        \n        if(this.platform.peopleNoOneAccessory) {\n            this.platform.peopleNoOneAccessory.refreshState();\n        }\n        \n        var lastSuccessfulPingMoment = \"none\";\n        var lastWebhookMoment = \"none\";\n        var lastSuccessfulPing = this.platform.storage.getItemSync('lastSuccessfulPing_' + this.target);\n        if(lastSuccessfulPing) {\n            lastSuccessfulPingMoment = moment(lastSuccessfulPing).format();\n        }\n        var lastWebhook = this.platform.storage.getItemSync('lastWebhook_' + this.target);\n        if(lastWebhook) {\n            lastWebhookMoment = moment(lastWebhook).format();\n        }\n        this.log('Changed occupancy state for %s to %s. Last successful ping %s , last webhook %s .', this.target, newState, lastSuccessfulPingMoment, lastWebhookMoment);\n    }\n}\n\nPeopleAccessory.prototype.getServices = function() {\n    return [this.service];\n}\n\n// #######################\n// PeopleAllAccessory\n// #######################\n\nfunction PeopleAllAccessory(log, name, platform) {\n    this.log = log;\n    this.name = name;\n    this.platform = platform;\n    \n    this.service = new Service.OccupancySensor(this.name);\n    this.service\n        .getCharacteristic(Characteristic.OccupancyDetected)\n        .on('get', this.getState.bind(this));\n}\n\nPeopleAllAccessory.prototype.getState = function(callback) {\n    callback(null, this.getStateFromCache());\n}\n\nPeopleAllAccessory.prototype.getStateFromCache = function() {\n    var isAnyoneActive = this.getAnyoneStateFromCache();\n    if(this.name === SENSOR_NOONE) {\n        return !isAnyoneActive;\n    }\n    else {\n        return isAnyoneActive;\n    }\n}\n\nPeopleAllAccessory.prototype.getAnyoneStateFromCache = function() {\n    for(var i = 0; i < this.platform.peopleAccessories.length; i++){\n        var peopleAccessory = this.platform.peopleAccessories[i];\n        var isActive = peopleAccessory.stateCache;\n        if(isActive) {\n            return true;\n        }\n    }\n    return false;\n}\n\nPeopleAllAccessory.prototype.refreshState = function() {\n    this.service.getCharacteristic(Characteristic.OccupancyDetected).setValue(this.getStateFromCache());\n}\n\nPeopleAllAccessory.prototype.getServices = function() {\n    return [this.service];\n}"}